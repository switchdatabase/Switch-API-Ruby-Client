=begin
#Switch Database REST API

#Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.

OpenAPI spec version: 1.2.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class AuthorizationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Generate Access Token
    # For generating Access Token, you need API Key and API Secret parameters that are provided from the developer portal. At the request, API Key that will be sent by using header is generated as portal API Key and Signature parameter is generated as md5(APISecret + ExpireTimestamp) format. At Expire parameter, token's expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information. 
    # @param api_key Your Switch API Key.
    # @param signature Signature parameter is generated as md5(APISecret + ExpireTimestamp) format.
    # @param expire Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def token_get(api_key, signature, expire, opts = {})
      data, _status_code, _headers = token_get_with_http_info(api_key, signature, expire, opts)
      return data
    end

    # Generate Access Token
    # For generating Access Token, you need API Key and API Secret parameters that are provided from the developer portal. At the request, API Key that will be sent by using header is generated as portal API Key and Signature parameter is generated as md5(APISecret + ExpireTimestamp) format. At Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information. 
    # @param api_key Your Switch API Key.
    # @param signature Signature parameter is generated as md5(APISecret + ExpireTimestamp) format.
    # @param expire Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def token_get_with_http_info(api_key, signature, expire, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuthorizationApi.token_get ..."
      end
      # verify the required parameter 'api_key' is set
      fail ArgumentError, "Missing the required parameter 'api_key' when calling AuthorizationApi.token_get" if api_key.nil?
      # verify the required parameter 'signature' is set
      fail ArgumentError, "Missing the required parameter 'signature' when calling AuthorizationApi.token_get" if signature.nil?
      # verify the required parameter 'expire' is set
      fail ArgumentError, "Missing the required parameter 'expire' when calling AuthorizationApi.token_get" if expire.nil?
      # resource path
      local_var_path = "/Token".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'APIKey'] = api_key
      header_params[:'Signature'] = signature
      header_params[:'Expire'] = expire

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorizationApi#token_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
